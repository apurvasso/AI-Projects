 /* Name:Apurva Sonawane
 * RollNo: 3458
 * C Number: C22019221457
 * 8 puzzle problem implementation
 */

package a_star;

import java.util.Comparator;
import java.awt.Point;
import java.util.PriorityQueue;
import java.util.Scanner;

class Eight_pzl{
	int[][] puzzle;
	void enter_puzzle() {
		puzzle=new int[3][3];
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter initial state values of 8 puzzle: ");
		for(int i=0;i<3;i++) {
			for(int j=0;j<3;j++) {
				System.out.print("puzzle[" + i + "][" + j + "] : ");
				puzzle[i][j]=sc.nextInt();
			}
		}
	}
	
	void display_puzzle() {
		System.out.println("===================");
		for(int i=0;i<3;i++) {
			for(int j=0;j<3;j++) {
				if(puzzle[i][j]==-1) {
					System.out.format("%3s","--");
					System.out.print("  |");
					continue;
				}
				System.out.format("%3d",puzzle[i][j]);
				System.out.print("  |");
				//if()
			}
			System.out.println();
		}
		System.out.println("===================\n");
	}
	
	int calHval(Eight_pzl res) {
		int count=0;
		for(int i=0; i<3; i++) {
			for(int j=0; j<3; j++) {
				if(this.puzzle[i][j] != res.puzzle[i][j]) {
					count++;
				}
			}
		}
		return count;
	}
	
	boolean isEqual(Eight_pzl A, Eight_pzl B){ //are puzzles A and B equal
		for(int i=0; i<3; i++) {
			for(int j=0; j<3; j++) {
				if(A.puzzle[i][j] != B.puzzle[i][j]) {
					return false;
				}
			}
		}
		return true;
	}
	
	int a_star_method(Eight_pzl goal,String str,int i,int j){
		int depth=0;//i , j give us the blank position
		int up=9,down=9,left=9,right=9;
		
		PriorityQueue<Point> pq = new PriorityQueue<Point>(4,new comparator());
		if(this.isEqual(this,goal)) {
			return 0;
		}
		//move to up
		if(str.compareToIgnoreCase("up")!=0) {
			if(i+1 < 3) {
				puzzle[i][j] = puzzle[i+1][j];
				puzzle[i+1][j] = -1;
				up =this.calHval(goal);
				pq.add(new Point(1,up));
				puzzle[i+1][j] = puzzle[i][j];
				puzzle[i][j] = -1;
			}
		}
		
		//move to down
		if(str.compareToIgnoreCase("down")!=0) {
			if(i-1 >= 0) {
				puzzle[i][j] = puzzle[i-1][j];
				puzzle[i-1][j] = -1;
				down = this.calHval(goal);
				pq.add(new Point(2,down));
				puzzle[i-1][j]=puzzle[i][j];
				puzzle[i][j] = -1;
			}
		}
		//move to left
		if(str.compareToIgnoreCase("left")!=0) {
			if(j+1 < 3) {
				puzzle[i][j] = puzzle[i][j+1];
				puzzle[i][j+1] = -1;
				left = this.calHval(goal);
				pq.add(new Point(3,left));
				puzzle[i][j+1]=puzzle[i][j];
				puzzle[i][j]= -1;
			}
		}
		
		//move to right
		if(str.compareToIgnoreCase("right")!=0) {
			if(j-1 >= 0) {
				puzzle[i][j] = puzzle[i][j-1];
				puzzle[i][j-1] = -1;
				right =this.calHval(goal);	
				pq.add(new Point(4,right));
				puzzle[i][j-1]=puzzle[i][j];
				puzzle[i][j] = -1;
			}
		}
		Point p = pq.remove();
		pq.clear();
		switch(p.x) {
			case 1:	puzzle[i][j] = puzzle[i+1][j];
					puzzle[i+1][j] = -1;
					System.out.println("Up------\n");
					this.display_puzzle();
					depth=a_star_method(goal,"down",i+1,j);
					break;
			case 2:	puzzle[i][j] = puzzle[i-1][j];
					puzzle[i-1][j] = -1;
					System.out.println("Down------\n");
					this.display_puzzle();
					depth=a_star_method(goal,"up",i-1,j);
					break;
			case 3:	puzzle[i][j] = puzzle[i][j+1];
					puzzle[i][j+1] = -1;
					System.out.println("Left------");
					this.display_puzzle();
					depth=a_star_method(goal,"right",i,j+1);
					break;
			case 4:	puzzle[i][j] = puzzle[i][j-1];
					puzzle[i][j-1] = -1;
					System.out.println("Right------\n");
					this.display_puzzle();
					depth=a_star_method(goal,"left",i,j-1);
					break;
			default:System.out.println("Not possible--default case");
					break;
		}
		return depth+1;
	}
}

class comparator implements Comparator<Point>{
	@Override
	public int compare(Point a,Point b) {
		if(a.y > b.y) {
			return 1;
		}
		else if(a.y < b.y) {
			return -1;
		}
		return 0;
	}
}

class A_star_main{
	public static void main(String args[]) {
		System.out.println("Initial state: ");
		Eight_pzl pzl = new Eight_pzl(); 
		pzl.enter_puzzle();
		pzl.display_puzzle();
		
		System.out.println("Goal state: ");
		Eight_pzl goal = new Eight_pzl();
		goal.enter_puzzle();
		goal.display_puzzle();
		
		Scanner sc=new Scanner(System.in);
		System.out.print("Specify blank position: \ni: ");
		int i=sc.nextInt();
		System.out.print("j: ");
		int j=sc.nextInt();
		
		System.out.println("Total Depth :  "+pzl.a_star_method(goal, "", i, j));
	}
}

/*
 * 
 * Output:
 * 
 * 
Initial state:  
Enter initial state values of 8 puzzle: 
puzzle[0][0] : 2
puzzle[0][1] : 8
puzzle[0][2] : 3
puzzle[1][0] : 1
puzzle[1][1] : 6
puzzle[1][2] : 4
puzzle[2][0] : 7
puzzle[2][1] : -1
puzzle[2][2] : 5
===================
  2  |  8  |  3  |
  1  |  6  |  4  |
  7  | --  |  5  |
===================

Goal state: 
Enter initial state values of 8 puzzle: 
puzzle[0][0] : 1
puzzle[0][1] : 2
puzzle[0][2] : 3
puzzle[1][0] : 8
puzzle[1][1] : -1
puzzle[1][2] : 4
puzzle[2][0] : 7
puzzle[2][1] : 6
puzzle[2][2] : 5
===================
  1  |  2  |  3  |
  8  | --  |  4  |
  7  |  6  |  5  |
===================

Specify blank position: 
i: 2
j: 1
Down------

===================
  2  |  8  |  3  |
  1  | --  |  4  |
  7  |  6  |  5  |
===================

Down------

===================
  2  | --  |  3  |
  1  |  8  |  4  |
  7  |  6  |  5  |
===================

Right------

===================
 --  |  2  |  3  |
  1  |  8  |  4  |
  7  |  6  |  5  |
===================

Up------

===================
  1  |  2  |  3  |
 --  |  8  |  4  |
  7  |  6  |  5  |
===================

Left------
===================
  1  |  2  |  3  |
  8  | --  |  4  |
  7  |  6  |  5  |
===================

Total Depth :  5
*/
