/*
Roll no.:3458
Cno.:C22019221457
Name: Apurva Ashok Sonawane
Batch: B4
T.Y.B.Tech. Computer
Problem Statement: TicTacToe game using MiniMax algorithm
 */
import java.util.*;

public class TicTacToe {
	  
	public static void main(String[] args) {
		char[][] board = new char[3][3];
		
		for(int i = 0; i < 3; i++) {
			for(int j = 0; j < 3; j++) {
				board[i][j] = '-';
			}
		}
		Scanner sc = new Scanner(System.in);
		System.out.println("Tic Tac Toe Game");
		boolean player1 = true;
		boolean gameEnded = false;
		while(!gameEnded) {

			drawBoard(board);

			if(player1) {
				System.out.println("X's turn :");
			} else {
				System.out.println("Y's turn :");
			}

			char c = '-';
			if(player1) {
				c = 'X';
			} else {
				c = 'O';
			}

			//Create row and col variables which represent indexes that correspond to a position on our board
			int row = 0;
			int col = 0;

			//Only break out of the while loop once the user enters a valid position
			while(true) {
				System.out.print("Enter X co-ordinate of position (0, 1, or 2): ");
				row = sc.nextInt();
				System.out.print("Enter Y co-ordinate of position  (0, 1, or 2): ");
				col = sc.nextInt();

				if(row < 0 || col < 0 || row > 2 || col > 2) {//Check if the row and col are 0, 1, or 2
					System.out.println("This position is out of the bounds of the board. Try again.");
				
				//Check if the position on the board the user entered is empty (has a -) or not
				} else if(board[row][col] != '-') {
					System.out.println("Position is already occupied. Try again.");
				
				//Otherwise, the position is valid so break out of the while loop
				} else {
					break;
				}
			
			}

			board[row][col] = c;//Setting the position on the board at row, col to c

			//Checking if a player has won
			if(playerHasWon(board) == 'X') {
				System.out.println("X has won!");
				gameEnded = true;
			} else if(playerHasWon(board) == 'O') {
				System.out.println("O has won!");
				gameEnded = true;
			} else {

				//If neither player has won, check to see if there has been a tie (if the board is full)
				if(boardIsFull(board)) {
					System.out.println("It's a tie!");
					gameEnded = true;
				} else {
					//If player1 is true, make it false, and vice versa; this way, the players alternate each turn
					player1 = !player1;
				}

			}

		}
		
		//Draw the board at the end of the game
		drawBoard(board);

  }//main() ends here

	public static void drawBoard(char[][] board) {
		System.out.println("Board:");
		for(int i = 0; i < 3; i++) {
			//Inner for loop prints out each row of the board
			for(int j = 0; j < 3; j++) {
				System.out.print(board[i][j]);
			}
			System.out.println();
		}
	}

	
	public static char playerHasWon(char[][] board) {//Function to see if someone has won and return the winning char
		
		//Checking each row
		for(int i = 0; i < 3; i++) {
			if(board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != '-') {
				return board[i][0];
			}
		}

		//Checking each column
		for(int j = 0; j < 3; j++) {
			if(board[0][j] == board[1][j] && board[1][j] == board[2][j] && board[0][j] != '-') {
				return board[0][j];
			}
		}

		//Checking the diagonals
		if(board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != '-') {
			return board[0][0];
		}
		if(board[2][0] == board[1][1] && board[1][1] ==  board[0][2] && board[2][0] != '-') {
			return board[2][0];
		}

		//Else no one has not won yet
		return ' ';

	}

	//Make a function to check if all of the positions on the board have been filled
	public static boolean boardIsFull(char[][] board) {
		for(int i = 0; i < 3; i++) {
			for(int j = 0; j < 3; j++) {
				if(board[i][j] == '-') {
					return false;
				}
			}
		}
		return true;
	}
	
	static Boolean isMovesLeft(char board[][])
	{
	    for (int i = 0; i < 3; i++)
	        for (int j = 0; j < 3; j++)
	            if (board[i][j] == '_')
	                return true;
	    return false;
	}
	// This is the evaluation function as discussed
	// in the previous article ( http://goo.gl/sJgv68 )
	static int evaluate(char board[][])
	{
	    // Checking for Rows for X or O victory.
	    for (int row = 0; row < 3; row++)
	    {
	        if (board[row][0] == board[row][1] &&
	            board[row][1] == board[row][2])
	        {
	            if (board[row][0] == 'X')
	                return +10;
	            else if (board[row][0] == 'O')
	                return -10;
	        }
	    }
	 
	    // Checking for Columns for X or O victory.
	    for (int col = 0; col < 3; col++)
	    {
	        if (board[0][col] == board[1][col] &&
	            board[1][col] == board[2][col])
	        {
	            if (board[0][col] == 'X')
	                return +10;
	 
	            else if (board[0][col] == 'O')
	                return -10;
	        }
	    }
	 
	    // Checking for Diagonals for X or O victory.
	    if (board[0][0] == board[1][1] && board[1][1] == board[2][2])
	    {
	        if (board[0][0] == 'X')
	            return +10;
	        else if (board[0][0] == 'O')
	            return -10;
	    }
	 
	    if (board[0][2] == board[1][1] && board[1][1] == board[2][0])
	    {
	        if (board[0][2] == 'X')
	            return +10;
	        else if (board[0][2] == 'O')
	            return -10;
	    }
	 
	    // Else if none of them have won then return 0
	    return 0;
	}
	 
	// This is the minimax function. It considers all
	// the possible ways the game can go and returns
	// the value of the board
	static int minimax(char board[][],int depth, Boolean isMax)
	{
	    int score = evaluate(board);
	 
	    // If Maximizer has won the game
	    // return his/her evaluated score
	    if (score == 10)
	        return score;
	 
	    // If Minimizer has won the game
	    // return his/her evaluated score
	    if (score == -10)
	        return score;
	 
	    // If there are no more moves and
	    // no winner then it is a tie
	    if (isMovesLeft(board) == false)
	        return 0;
	 
	    // Maximize move
	    if (isMax)
	    {
	        int best = -1000;
	 
	        // Traverse all cells
	        for (int i = 0; i < 3; i++)
	        {
	            for (int j = 0; j < 3; j++)
	            {
	                if (board[i][j]=='_')
	                {
	                    board[i][j] = 'X';
	 
	                    best = Math.max(best, minimax(board,
	                                    depth + 1, !isMax));
	                    board[i][j] = '_';
	                }
	            }
	        }
	        return best;
	    }
	 
	    else
	    {
	        int best = 1000;
	 
	        // Traverse all cells
	        for (int i = 0; i < 3; i++)
	        {
	            for (int j = 0; j < 3; j++)
	            {
	                if (board[i][j] == '_') //Checking if cell is empty
	                {
	                    // Make the move
	                    board[i][j] = 'O';
	                    // Calling minimax() recursively and choose the minimum value
	                    best = Math.min(best, minimax(board,depth + 1, !isMax));
	                    // Undo the move
	                    board[i][j] = '_';
	                }
	            }
	        }
	        return best;
	    }
	}
}

/*
 * Tic Tac Toe Game
Board:
---
---
---
X's turn :
Enter X co-ordinate of position (0, 1, or 2): 1
Enter Y co-ordinate of position  (0, 1, or 2): 1
Board:
---
-X-
---
Y's turn :
Enter X co-ordinate of position (0, 1, or 2): 2
Enter Y co-ordinate of position  (0, 1, or 2): 0
Board:
---
-X-
O--
X's turn :
Enter X co-ordinate of position (0, 1, or 2): 2
Enter Y co-ordinate of position  (0, 1, or 2): 1
Board:
---
-X-
OX-
Y's turn :
Enter X co-ordinate of position (0, 1, or 2): 0
Enter Y co-ordinate of position  (0, 1, or 2): 1
Board:
-O-
-X-
OX-
X's turn :
Enter X co-ordinate of position (0, 1, or 2): 0
Enter Y co-ordinate of position  (0, 1, or 2): 0
Board:
XO-
-X-
OX-
Y's turn :
Enter X co-ordinate of position (0, 1, or 2): 0
Enter Y co-ordinate of position  (0, 1, or 2): 2
Board:
XOO
-X-
OX-
X's turn :
Enter X co-ordinate of position (0, 1, or 2): 1
Enter Y co-ordinate of position  (0, 1, or 2): 0
Board:
XOO
XX-
OX-
Y's turn :
Enter X co-ordinate of position (0, 1, or 2): 1
Enter Y co-ordinate of position  (0, 1, or 2): 2
Board:
XOO
XXO
OX-
X's turn :
Enter X co-ordinate of position (0, 1, or 2): 2
Enter Y co-ordinate of position  (0, 1, or 2): 2
X has won!
Board:
XOO
XXO
OXX

*/
